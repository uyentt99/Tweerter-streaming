version: '3'
services:
#
#  SPARK 
#
  spark-master:
    image: bde2020/spark-master:2.4.5-hadoop2.7
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - "D:/Code/IdeaProjects/bigdata/spark-stream-kafka/target:/spark/target"
  spark-worker-1:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "28081:8081"
      - "4041:4040"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_SHUFFLE_SERVICE_ENABLED=true"
    volumes:
      - "D:/Code/IdeaProjects/bigdata/spark-stream-kafka/target:/spark/target"
  spark-worker-2:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "28082:8081"
      - "4040:4040"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_SHUFFLE_SERVICE_ENABLED=true"
    volumes:
      - "D:/Code/IdeaProjects/bigdata/spark-stream-kafka/target:/spark/target"
  #
  # Custom pyspark (build from Dockerfile (java8, python 2.7, spark 2.4.5))
  #
  pyspark:
     image: khiempmk/pyspark-nodebook:2.4.5 
     container_name: pyspark-notebook
     ports:
      - "8888:8888" 
     environment:
      - JUPYTER_TOKEN=easy
  #
  # Kafka cluster
  #
  zookeeper:
    image: zookeeper:3.4.10
    container_name: zookeeper
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
      ZOO_TICK_TIME: 15000
    ports:
      - 2181:2181      
  kafka-broker-1:
    image: wurstmeister/kafka:2.12-2.2.1
    container_name: kafka-broker-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka-broker-1:9093,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://kafka-broker-1:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      # - LOGS_DIR= /kafka/kafka-logs-1
      # - DATA_DIR= /kafka/kafka-data-1
    # volumes:
    #   - /usr/kafka-logs-1:/kafka/kafka-logs-1
    #   - /usr/lafka-data-1:/kafka/kafka-data-1
  kafka-broker-2:
    image: wurstmeister/kafka:2.12-2.2.1
    container_name: kafka-broker-2
    depends_on:
      - zookeeper
      - kafka-broker-1
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka-broker-2:9093,OUTSIDE://localhost:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://kafka-broker-2:9093,OUTSIDE://0.0.0.0:9094
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
    #   - LOGS_DIR= /kafka/kafka-logs-2
    #   - DATA_DIR= /kafka/kafka-data-2
    # volumes:
    #   - /usr/kafka-logs-2:/kafka/kafka-logs-2
    #   - /usr/lafka-data-2:/kafka/kafka-data-2
  #
  # Input to kafka ( build from scala code)
  #
  twitter-stream:
     image : khiempmk/twitter_stream_kafka:lastest
     container_name : twitter-stream
     depends_on:
      - kafka-broker-1
      - kafka-broker-2
     volumes:
      - "./conf/:/usr/local/service/conf"
  #
  # HDFS cluster
  #
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver: